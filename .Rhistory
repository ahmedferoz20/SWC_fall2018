setwd("~/Desktop/SWC_fall2018")
3+5
sqrt(64)
sqr()
3+
print("Farah")
print(Feroz)
print(64)
print("Farah")
print("WOW")
name <- "Jane"
print(name)
price <- 3.99
price
#list of objects
ls()
#remove objects
rm(price)
rm(list=ls())
#Functions
mass <- 64
sqrt(64)
res <- sqrt(mass)
res
#getwd()function
getwd()
#using the help tab
?plot
help("mean")
height <- height + 20
mass <- 47.5
age <-122
height <- 150
mass <- mass *2.3
age <- age -20
height <- height + 20
#additional packages
install.packages("knitr")
library(knitr)
age <- 45
str(age)
typeof(is.integer(score))
score <- 79
is.integer(score)
typeof(score)
typeof(is.integer(score))
is.logical(is.numeric(typeof(is.integer(score))))
is.logical(is.numeric(typeof(is.integer(score))))
step1 <- is.integer(score)
step1
step2 <- typeof(step1)
step2
step3 <- is.numeric(step2)
step3
step4
step4 <- is.logical(step3)
step4
v <- c(1:3, 45)
#vector:collection of elements of the same data type
#how to create a vector
#c(): concatantate function
v <- c(1,2,3,45)
v <- c(1:3, 45)
#examine the object
lenght(v)
v <- c("n:z")
#examine the object
lenght(v)
#examine the object
lenght(v)
v <- c(1:3, 45)
#examine the object
lenght(v)
#examine the object
length(v)
str(v)
#view parts of data/vector
head(v, n=2)
taile (v, n=3)
tail (v, n=3)
#let's create v2 and then add v2 to v1
v3
v3 <- v1+v2
#add a vector
#let's create v2 and then add v2 to v1
v2 <- c(1:5)
#add a vector
#let's create v2 and then add v2 to v1
v2 <- c(1:5)
v3
v3 <- v1+v2
#manupulate
v1 <- 2*v
v1
#add a vector
#let's create v2 and then add v2 to v1
v2 <- c(1:5)
v2
v3 <- v1+v2
v2
v3 <- v1+v2
v3
typeof(v4)
#character vector
v4 <- c("jane", "john", "Farah")
typeof(v4)
#change data type
v3 <- as.character(v3)
v3
typeof(v3)
str(v3)
#Matices, factors, list*** challenge
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#to create matrices we use the matrix function
m <- matrix(c(1:18), 3,6)
m
dim(m)
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#to create matrices we use the matrix function
m <- matrix(c(1:18))
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#to create matrices we use the matrix function
m <- matrix(c(1:18) 4,2)
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#to create matrices we use the matrix function
m <- matrix(c(1:20) 4,5)
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#to create matrices we use the matrix function
m <- matrix(c(1:18) 4,6)
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#to create matrices we use the matrix function
m <- matrix(c(1:18) 9,2)
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#to create matrices we use the matrix function
m <- matrix(c(1:18),9,2)
m
#Matices, factors, list*** challenge
#Matrices: 2D vectors
#to create matrices we use the matrix function
m <- matrix(c(1:18),4,6)
#special vectors used to represent categorical data
#factor
#special vectors used to represent categorical data
#to create a factor we use a factor function
continent <- factor(c("Asia", "America", Europe))
continet
#factor
#special vectors used to represent categorical data
#to create a factor we use a factor function
continent <- factor(c("Asia", "America", "Europe"))
str(continet)
str(continent)
#Lists: generic vectors- collection of elements
with different data tupes
ollection of elements
#with different data types
#Lists: generic vectors- collection of elements
#with different data types- numerical and char
l <- list("Afghanistan", "Albania", 1952, 876897)
l
typeof(l)
str(l)
l <- ("chicken", "souo", "salad", "tea")
#l <- ("chicken", "soup", "salad", "tea")
#Data frame
myorder <- list(items,types,cost)
myorder.df <- data.frame(items, types, cost)
#l <- ("chicken", "soup", "salad", "tea")
#Data frame
myorder <- list(items,types,cost)
myorder.df <- data.frame(items, types, cost)
menutype <- factor(c("solid", "liquid", "solid", "liquid"))
menuitems <- c("chicken", :soup", "salad", "tea)
menuitems <- c("chicken", "soup", "salad", "tea)
menutype <- factor(c("solid", "liquid", "solid", "liquid"))
menucost <- c(4.99,2.99,3.29,1.89)
myorder_df <- data.frame(menuitems,menutypes,menucost)
menuitems <- c("chicken", "soup", "salad", "tea)
myorder_df
myorder_df
myorder_df <- data.frame(menuitems,menutypes,menucost)
myorder.df <- data.frame(items, types, cost)
menutypes <- factor(c("solid", "liquid", "solid", "liquid"))
myorder_df
myorder_df <- data.frame(menuitems,menutypes,menucost)
menuitems <- c("chicken", "soup", "salad", "tea)
menuitems <- c("chicken", "soup", "salad", "tea")
menuitems <- c("chicken", "soup", "salad", "tea")
myorder_df <- data.frame(menuitems,menutypes,menucost)
myorder_df
v <-  c(1:10)
v <-  c(1:10)
v <-  c(1:10)
v[2}]
v[2]
v[c(3:6)]
v[-c(3:6)]
myorder_df[1]
myoder_df[[1]]
myorder_df[[1]]
type.convert(myorder_df[1])
typeof.convert(myorder_df[1])
typeof(myorder_df[1])
typeof(myorder_df[[1]])
str(myorder_df)
## data_frame[row,column]
myorder_df[1:3]
myorder_df$
myorder_df$menuitems
myorder_df$menuitems
than
# <- less than
han
# <- less than
# == - equal to
# <- less than
# == - equal to
# >= - greater than or equal to
# <- less than
# == - equal to
# >= - greater than or equal to
# <= less than or equal to
v <- c(5,1,3,4,5)
v[v==5]
v==5
df <- myorder_df[myorder_df$menutypes=="solid",]
df1
df1 <- myorder_df[myorder_df$menutypes=="solid",]
df1
df2 <- myorder_df[myorder-df$menucost>3,]
df2 <- myorder_df[myorder_df$menucost>3,]
df2
df3 <- myorder_df[myorder_df$menutype=="solid"]
df3
myorder_df$menutype=="solid"
myorder_df$menutypes
myorder_df
df3
myData <- read.table("Data/gapminder.txt")
## For csv files use read.csv()
str(myData)
## For csv files use read.csv()
str(myData)
typeof(mydata$v2)
typeof(myData$v2)
## For csv files use read.csv()
str(myData)
typeof(myData$v2)
v2
typeof ()
typeof(myData$V2)
typeof(myData$V2)
myData[,c(3,5)]
unique(myData[,1])
unique(myData$V1)
unique(myData[1,1])
unique(myData[1,1])
unique(myData[1,1])
unique(myData[1,1])
str(myData)
myData[,c(3,5)]
myData[1,c(3,5)]
myData[1,1]
myData[1,1]
myData[(1,1)]
myData[(2,1)]
myData[2,1]
str(myData)
#4. unique(myData$V1)
#4. unique(myData$V1)
#5. myData[myData$lifeExp<70]
#4. unique(myData$V1)
#5. myData[myData$lifeExp<70]
#6. myData$PopM <- myData$pop/(10/6)
#Save the graph
Canada <- myDatafull[myDatafull$country="Canada",]
#Save the graph
Canada <- myDatafull[myDatafull$country="Canada",]
#plot
plot(Canada$year,Canada$lifeExp, col="blue", type=L)
#plot
plot(Canada$year,Canada$lifeExp, col="blue", type=L)
#Save the graph
Canada <- myDatafull[myDatafull$country=="Canada",]
#Save the graph
Canada <- myData[myData$country=="Canada",]
png("Canada.png") #Open.Canada.png file
#plot
plot(Canada$year,Canada$lifeExp, col="blue", type=L)
Canada
myData
#Subset Canada Only
myData <- read.table(file = "Data/gapminder.txt", header = T)
#Subset Canada Only
myData <- read.table(file = "Data/gapminder.txt", header = T)
myData
#Save the graph
Canada <- myData[myData$country=="Canada",]
Canada
png("Canada.png") #Open.Canada.png file
#plot
plot(Canada$year,Canada$lifeExp, col="blue", type=L)
#plot
plot(Canada$year,Canada$lifeExp, col="blue", type="l")
dev.off()
